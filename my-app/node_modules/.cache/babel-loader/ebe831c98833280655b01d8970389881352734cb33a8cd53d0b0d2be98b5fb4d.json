{"ast":null,"code":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('util'),\n  events = require('events'),\n  http = require('http'),\n  crypto = require('crypto'),\n  Options = require('options'),\n  WebSocket = require('./WebSocket'),\n  tls = require('tls'),\n  url = require('url');\n\n/**\n * WebSocket Server implementation\n */\n\nfunction WebSocketServer(options, callback) {\n  options = new Options({\n    host: '0.0.0.0',\n    port: null,\n    server: null,\n    verifyClient: null,\n    handleProtocols: null,\n    path: null,\n    noServer: false,\n    disableHixie: false,\n    clientTracking: true\n  }).merge(options);\n  if (!options.isDefinedAndNonNull('port') && !options.isDefinedAndNonNull('server') && !options.value.noServer) {\n    throw new TypeError('`port` or a `server` must be provided');\n  }\n  var self = this;\n  if (options.isDefinedAndNonNull('port')) {\n    this._server = http.createServer(function (req, res) {\n      res.writeHead(200, {\n        'Content-Type': 'text/plain'\n      });\n      res.end('Not implemented');\n    });\n    this._server.listen(options.value.port, options.value.host, callback);\n    this._closeServer = function () {\n      if (self._server) self._server.close();\n    };\n  } else if (options.value.server) {\n    this._server = options.value.server;\n    if (options.value.path) {\n      // take note of the path, to avoid collisions when multiple websocket servers are\n      // listening on the same http server\n      if (this._server._webSocketPaths && options.value.server._webSocketPaths[options.value.path]) {\n        throw new Error('two instances of WebSocketServer cannot listen on the same http server path');\n      }\n      if (typeof this._server._webSocketPaths !== 'object') {\n        this._server._webSocketPaths = {};\n      }\n      this._server._webSocketPaths[options.value.path] = 1;\n    }\n  }\n  if (this._server) this._server.once('listening', function () {\n    self.emit('listening');\n  });\n  if (typeof this._server != 'undefined') {\n    this._server.on('error', function (error) {\n      self.emit('error', error);\n    });\n    this._server.on('upgrade', function (req, socket, upgradeHead) {\n      //copy upgradeHead to avoid retention of large slab buffers used in node core\n      var head = new Buffer(upgradeHead.length);\n      upgradeHead.copy(head);\n      self.handleUpgrade(req, socket, head, function (client) {\n        self.emit('connection' + req.url, client);\n        self.emit('connection', client);\n      });\n    });\n  }\n  this.options = options.value;\n  this.path = options.value.path;\n  this.clients = [];\n}\n\n/**\n * Inherits from EventEmitter.\n */\n\nutil.inherits(WebSocketServer, events.EventEmitter);\n\n/**\n * Immediately shuts down the connection.\n *\n * @api public\n */\n\nWebSocketServer.prototype.close = function () {\n  // terminate all associated clients\n  var error = null;\n  try {\n    for (var i = 0, l = this.clients.length; i < l; ++i) {\n      this.clients[i].terminate();\n    }\n  } catch (e) {\n    error = e;\n  }\n\n  // remove path descriptor, if any\n  if (this.path && this._server._webSocketPaths) {\n    delete this._server._webSocketPaths[this.path];\n    if (Object.keys(this._server._webSocketPaths).length == 0) {\n      delete this._server._webSocketPaths;\n    }\n  }\n\n  // close the http server if it was internally created\n  try {\n    if (typeof this._closeServer !== 'undefined') {\n      this._closeServer();\n    }\n  } finally {\n    delete this._server;\n  }\n  if (error) throw error;\n};\n\n/**\n * Handle a HTTP Upgrade request.\n *\n * @api public\n */\n\nWebSocketServer.prototype.handleUpgrade = function (req, socket, upgradeHead, cb) {\n  // check for wrong path\n  if (this.options.path) {\n    var u = url.parse(req.url);\n    if (u && u.pathname !== this.options.path) return;\n  }\n  if (typeof req.headers.upgrade === 'undefined' || req.headers.upgrade.toLowerCase() !== 'websocket') {\n    abortConnection(socket, 400, 'Bad Request');\n    return;\n  }\n  if (req.headers['sec-websocket-key1']) handleHixieUpgrade.apply(this, arguments);else handleHybiUpgrade.apply(this, arguments);\n};\nmodule.exports = WebSocketServer;\n\n/**\n * Entirely private apis,\n * which may or may not be bound to a sepcific WebSocket instance.\n */\n\nfunction handleHybiUpgrade(req, socket, upgradeHead, cb) {\n  // handle premature socket errors\n  var errorHandler = function () {\n    try {\n      socket.destroy();\n    } catch (e) {}\n  };\n  socket.on('error', errorHandler);\n\n  // verify key presence\n  if (!req.headers['sec-websocket-key']) {\n    abortConnection(socket, 400, 'Bad Request');\n    return;\n  }\n\n  // verify version\n  var version = parseInt(req.headers['sec-websocket-version']);\n  if ([8, 13].indexOf(version) === -1) {\n    abortConnection(socket, 400, 'Bad Request');\n    return;\n  }\n\n  // verify protocol\n  var protocols = req.headers['sec-websocket-protocol'];\n\n  // verify client\n  var origin = version < 13 ? req.headers['sec-websocket-origin'] : req.headers['origin'];\n\n  // handler to call when the connection sequence completes\n  var self = this;\n  var completeHybiUpgrade2 = function (protocol) {\n    // calc key\n    var key = req.headers['sec-websocket-key'];\n    var shasum = crypto.createHash('sha1');\n    shasum.update(key + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\");\n    key = shasum.digest('base64');\n    var headers = ['HTTP/1.1 101 Switching Protocols', 'Upgrade: websocket', 'Connection: Upgrade', 'Sec-WebSocket-Accept: ' + key];\n    if (typeof protocol != 'undefined') {\n      headers.push('Sec-WebSocket-Protocol: ' + protocol);\n    }\n\n    // allows external modification/inspection of handshake headers\n    self.emit('headers', headers);\n    socket.setTimeout(0);\n    socket.setNoDelay(true);\n    try {\n      socket.write(headers.concat('', '').join('\\r\\n'));\n    } catch (e) {\n      // if the upgrade write fails, shut the connection down hard\n      try {\n        socket.destroy();\n      } catch (e) {}\n      return;\n    }\n    var client = new WebSocket([req, socket, upgradeHead], {\n      protocolVersion: version,\n      protocol: protocol\n    });\n    if (self.options.clientTracking) {\n      self.clients.push(client);\n      client.on('close', function () {\n        var index = self.clients.indexOf(client);\n        if (index != -1) {\n          self.clients.splice(index, 1);\n        }\n      });\n    }\n\n    // signal upgrade complete\n    socket.removeListener('error', errorHandler);\n    cb(client);\n  };\n\n  // optionally call external protocol selection handler before\n  // calling completeHybiUpgrade2\n  var completeHybiUpgrade1 = function () {\n    // choose from the sub-protocols\n    if (typeof self.options.handleProtocols == 'function') {\n      var protList = (protocols || \"\").split(/, */);\n      var callbackCalled = false;\n      var res = self.options.handleProtocols(protList, function (result, protocol) {\n        callbackCalled = true;\n        if (!result) abortConnection(socket, 404, 'Unauthorized');else completeHybiUpgrade2(protocol);\n      });\n      if (!callbackCalled) {\n        // the handleProtocols handler never called our callback\n        abortConnection(socket, 501, 'Could not process protocols');\n      }\n      return;\n    } else {\n      if (typeof protocols !== 'undefined') {\n        completeHybiUpgrade2(protocols.split(/, */)[0]);\n      } else {\n        completeHybiUpgrade2();\n      }\n    }\n  };\n\n  // optionally call external client verification handler\n  if (typeof this.options.verifyClient == 'function') {\n    var info = {\n      origin: origin,\n      secure: typeof req.connection.authorized !== 'undefined' || typeof req.connection.encrypted !== 'undefined',\n      req: req\n    };\n    if (this.options.verifyClient.length == 2) {\n      this.options.verifyClient(info, function (result, code, name) {\n        if (typeof code === 'undefined') code = 401;\n        if (typeof name === 'undefined') name = http.STATUS_CODES[code];\n        if (!result) abortConnection(socket, code, name);else completeHybiUpgrade1();\n      });\n      return;\n    } else if (!this.options.verifyClient(info)) {\n      abortConnection(socket, 401, 'Unauthorized');\n      return;\n    }\n  }\n  completeHybiUpgrade1();\n}\nfunction handleHixieUpgrade(req, socket, upgradeHead, cb) {\n  // handle premature socket errors\n  var errorHandler = function () {\n    try {\n      socket.destroy();\n    } catch (e) {}\n  };\n  socket.on('error', errorHandler);\n\n  // bail if options prevent hixie\n  if (this.options.disableHixie) {\n    abortConnection(socket, 401, 'Hixie support disabled');\n    return;\n  }\n\n  // verify key presence\n  if (!req.headers['sec-websocket-key2']) {\n    abortConnection(socket, 400, 'Bad Request');\n    return;\n  }\n  var origin = req.headers['origin'],\n    self = this;\n\n  // setup handshake completion to run after client has been verified\n  var onClientVerified = function () {\n    var wshost;\n    if (!req.headers['x-forwarded-host']) wshost = req.headers.host;else wshost = req.headers['x-forwarded-host'];\n    var location = (req.headers['x-forwarded-proto'] === 'https' || socket.encrypted ? 'wss' : 'ws') + '://' + wshost + req.url,\n      protocol = req.headers['sec-websocket-protocol'];\n\n    // handshake completion code to run once nonce has been successfully retrieved\n    var completeHandshake = function (nonce, rest) {\n      // calculate key\n      var k1 = req.headers['sec-websocket-key1'],\n        k2 = req.headers['sec-websocket-key2'],\n        md5 = crypto.createHash('md5');\n      [k1, k2].forEach(function (k) {\n        var n = parseInt(k.replace(/[^\\d]/g, '')),\n          spaces = k.replace(/[^ ]/g, '').length;\n        if (spaces === 0 || n % spaces !== 0) {\n          abortConnection(socket, 400, 'Bad Request');\n          return;\n        }\n        n /= spaces;\n        md5.update(String.fromCharCode(n >> 24 & 0xFF, n >> 16 & 0xFF, n >> 8 & 0xFF, n & 0xFF));\n      });\n      md5.update(nonce.toString('binary'));\n      var headers = ['HTTP/1.1 101 Switching Protocols', 'Upgrade: WebSocket', 'Connection: Upgrade', 'Sec-WebSocket-Location: ' + location];\n      if (typeof protocol != 'undefined') headers.push('Sec-WebSocket-Protocol: ' + protocol);\n      if (typeof origin != 'undefined') headers.push('Sec-WebSocket-Origin: ' + origin);\n      socket.setTimeout(0);\n      socket.setNoDelay(true);\n      try {\n        // merge header and hash buffer\n        var headerBuffer = new Buffer(headers.concat('', '').join('\\r\\n'));\n        var hashBuffer = new Buffer(md5.digest('binary'), 'binary');\n        var handshakeBuffer = new Buffer(headerBuffer.length + hashBuffer.length);\n        headerBuffer.copy(handshakeBuffer, 0);\n        hashBuffer.copy(handshakeBuffer, headerBuffer.length);\n\n        // do a single write, which - upon success - causes a new client websocket to be setup\n        socket.write(handshakeBuffer, 'binary', function (err) {\n          if (err) return; // do not create client if an error happens\n          var client = new WebSocket([req, socket, rest], {\n            protocolVersion: 'hixie-76',\n            protocol: protocol\n          });\n          if (self.options.clientTracking) {\n            self.clients.push(client);\n            client.on('close', function () {\n              var index = self.clients.indexOf(client);\n              if (index != -1) {\n                self.clients.splice(index, 1);\n              }\n            });\n          }\n\n          // signal upgrade complete\n          socket.removeListener('error', errorHandler);\n          cb(client);\n        });\n      } catch (e) {\n        try {\n          socket.destroy();\n        } catch (e) {}\n        return;\n      }\n    };\n\n    // retrieve nonce\n    var nonceLength = 8;\n    if (upgradeHead && upgradeHead.length >= nonceLength) {\n      var nonce = upgradeHead.slice(0, nonceLength);\n      var rest = upgradeHead.length > nonceLength ? upgradeHead.slice(nonceLength) : null;\n      completeHandshake.call(self, nonce, rest);\n    } else {\n      // nonce not present in upgradeHead, so we must wait for enough data\n      // data to arrive before continuing\n      var nonce = new Buffer(nonceLength);\n      upgradeHead.copy(nonce, 0);\n      var received = upgradeHead.length;\n      var rest = null;\n      var handler = function (data) {\n        var toRead = Math.min(data.length, nonceLength - received);\n        if (toRead === 0) return;\n        data.copy(nonce, received, 0, toRead);\n        received += toRead;\n        if (received == nonceLength) {\n          socket.removeListener('data', handler);\n          if (toRead < data.length) rest = data.slice(toRead);\n          completeHandshake.call(self, nonce, rest);\n        }\n      };\n      socket.on('data', handler);\n    }\n  };\n\n  // verify client\n  if (typeof this.options.verifyClient == 'function') {\n    var info = {\n      origin: origin,\n      secure: typeof req.connection.authorized !== 'undefined' || typeof req.connection.encrypted !== 'undefined',\n      req: req\n    };\n    if (this.options.verifyClient.length == 2) {\n      var self = this;\n      this.options.verifyClient(info, function (result, code, name) {\n        if (typeof code === 'undefined') code = 401;\n        if (typeof name === 'undefined') name = http.STATUS_CODES[code];\n        if (!result) abortConnection(socket, code, name);else onClientVerified.apply(self);\n      });\n      return;\n    } else if (!this.options.verifyClient(info)) {\n      abortConnection(socket, 401, 'Unauthorized');\n      return;\n    }\n  }\n\n  // no client verification required\n  onClientVerified();\n}\nfunction abortConnection(socket, code, name) {\n  try {\n    var response = ['HTTP/1.1 ' + code + ' ' + name, 'Content-type: text/html'];\n    socket.write(response.concat('', '').join('\\r\\n'));\n  } catch (e) {/* ignore errors - we've aborted this connection */} finally {\n    // ensure that an early aborted connection is shut down completely\n    try {\n      socket.destroy();\n    } catch (e) {}\n  }\n}","map":{"version":3,"names":["util","require","events","http","crypto","Options","WebSocket","tls","url","WebSocketServer","options","callback","host","port","server","verifyClient","handleProtocols","path","noServer","disableHixie","clientTracking","merge","isDefinedAndNonNull","value","TypeError","self","_server","createServer","req","res","writeHead","end","listen","_closeServer","close","_webSocketPaths","Error","once","emit","on","error","socket","upgradeHead","head","Buffer","length","copy","handleUpgrade","client","clients","inherits","EventEmitter","prototype","i","l","terminate","e","Object","keys","cb","u","parse","pathname","headers","upgrade","toLowerCase","abortConnection","handleHixieUpgrade","apply","arguments","handleHybiUpgrade","module","exports","errorHandler","destroy","version","parseInt","indexOf","protocols","origin","completeHybiUpgrade2","protocol","key","shasum","createHash","update","digest","push","setTimeout","setNoDelay","write","concat","join","protocolVersion","index","splice","removeListener","completeHybiUpgrade1","protList","split","callbackCalled","result","info","secure","connection","authorized","encrypted","code","name","STATUS_CODES","onClientVerified","wshost","location","completeHandshake","nonce","rest","k1","k2","md5","forEach","k","n","replace","spaces","String","fromCharCode","toString","headerBuffer","hashBuffer","handshakeBuffer","err","nonceLength","slice","call","received","handler","data","toRead","Math","min","response"],"sources":["D:/Deneme/my-app/node_modules/express-ws/node_modules/ws/lib/WebSocketServer.js"],"sourcesContent":["/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('util')\n  , events = require('events')\n  , http = require('http')\n  , crypto = require('crypto')\n  , Options = require('options')\n  , WebSocket = require('./WebSocket')\n  , tls = require('tls')\n  , url = require('url');\n\n/**\n * WebSocket Server implementation\n */\n\nfunction WebSocketServer(options, callback) {\n  options = new Options({\n    host: '0.0.0.0',\n    port: null,\n    server: null,\n    verifyClient: null,\n    handleProtocols: null,\n    path: null,\n    noServer: false,\n    disableHixie: false,\n    clientTracking: true\n  }).merge(options);\n\n  if (!options.isDefinedAndNonNull('port') && !options.isDefinedAndNonNull('server') && !options.value.noServer) {\n    throw new TypeError('`port` or a `server` must be provided');\n  }\n\n  var self = this;\n\n  if (options.isDefinedAndNonNull('port')) {\n    this._server = http.createServer(function (req, res) {\n      res.writeHead(200, {'Content-Type': 'text/plain'});\n      res.end('Not implemented');\n    });\n    this._server.listen(options.value.port, options.value.host, callback);\n    this._closeServer = function() { if (self._server) self._server.close(); };\n  }\n  else if (options.value.server) {\n    this._server = options.value.server;\n    if (options.value.path) {\n      // take note of the path, to avoid collisions when multiple websocket servers are\n      // listening on the same http server\n      if (this._server._webSocketPaths && options.value.server._webSocketPaths[options.value.path]) {\n        throw new Error('two instances of WebSocketServer cannot listen on the same http server path');\n      }\n      if (typeof this._server._webSocketPaths !== 'object') {\n        this._server._webSocketPaths = {};\n      }\n      this._server._webSocketPaths[options.value.path] = 1;\n    }\n  }\n  if (this._server) this._server.once('listening', function() { self.emit('listening'); });\n\n  if (typeof this._server != 'undefined') {\n    this._server.on('error', function(error) {\n      self.emit('error', error)\n    });\n    this._server.on('upgrade', function(req, socket, upgradeHead) {\n      //copy upgradeHead to avoid retention of large slab buffers used in node core\n      var head = new Buffer(upgradeHead.length);\n      upgradeHead.copy(head);\n\n      self.handleUpgrade(req, socket, head, function(client) {\n        self.emit('connection'+req.url, client);\n        self.emit('connection', client);\n      });\n    });\n  }\n\n  this.options = options.value;\n  this.path = options.value.path;\n  this.clients = [];\n}\n\n/**\n * Inherits from EventEmitter.\n */\n\nutil.inherits(WebSocketServer, events.EventEmitter);\n\n/**\n * Immediately shuts down the connection.\n *\n * @api public\n */\n\nWebSocketServer.prototype.close = function() {\n  // terminate all associated clients\n  var error = null;\n  try {\n    for (var i = 0, l = this.clients.length; i < l; ++i) {\n      this.clients[i].terminate();\n    }\n  }\n  catch (e) {\n    error = e;\n  }\n\n  // remove path descriptor, if any\n  if (this.path && this._server._webSocketPaths) {\n    delete this._server._webSocketPaths[this.path];\n    if (Object.keys(this._server._webSocketPaths).length == 0) {\n      delete this._server._webSocketPaths;\n    }\n  }\n\n  // close the http server if it was internally created\n  try {\n    if (typeof this._closeServer !== 'undefined') {\n      this._closeServer();\n    }\n  }\n  finally {\n    delete this._server;\n  }\n  if (error) throw error;\n}\n\n/**\n * Handle a HTTP Upgrade request.\n *\n * @api public\n */\n\nWebSocketServer.prototype.handleUpgrade = function(req, socket, upgradeHead, cb) {\n  // check for wrong path\n  if (this.options.path) {\n    var u = url.parse(req.url);\n    if (u && u.pathname !== this.options.path) return;\n  }\n\n  if (typeof req.headers.upgrade === 'undefined' || req.headers.upgrade.toLowerCase() !== 'websocket') {\n    abortConnection(socket, 400, 'Bad Request');\n    return;\n  }\n\n  if (req.headers['sec-websocket-key1']) handleHixieUpgrade.apply(this, arguments);\n  else handleHybiUpgrade.apply(this, arguments);\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Entirely private apis,\n * which may or may not be bound to a sepcific WebSocket instance.\n */\n\nfunction handleHybiUpgrade(req, socket, upgradeHead, cb) {\n  // handle premature socket errors\n  var errorHandler = function() {\n    try { socket.destroy(); } catch (e) {}\n  }\n  socket.on('error', errorHandler);\n\n  // verify key presence\n  if (!req.headers['sec-websocket-key']) {\n    abortConnection(socket, 400, 'Bad Request');\n    return;\n  }\n\n  // verify version\n  var version = parseInt(req.headers['sec-websocket-version']);\n  if ([8, 13].indexOf(version) === -1) {\n    abortConnection(socket, 400, 'Bad Request');\n    return;\n  }\n\n  // verify protocol\n  var protocols = req.headers['sec-websocket-protocol'];\n\n  // verify client\n  var origin = version < 13 ?\n    req.headers['sec-websocket-origin'] :\n    req.headers['origin'];\n\n  // handler to call when the connection sequence completes\n  var self = this;\n  var completeHybiUpgrade2 = function(protocol) {\n\n    // calc key\n    var key = req.headers['sec-websocket-key'];\n    var shasum = crypto.createHash('sha1');\n    shasum.update(key + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\");\n    key = shasum.digest('base64');\n\n    var headers = [\n        'HTTP/1.1 101 Switching Protocols'\n      , 'Upgrade: websocket'\n      , 'Connection: Upgrade'\n      , 'Sec-WebSocket-Accept: ' + key\n    ];\n\n    if (typeof protocol != 'undefined') {\n      headers.push('Sec-WebSocket-Protocol: ' + protocol);\n    }\n\n    // allows external modification/inspection of handshake headers\n    self.emit('headers', headers);\n\n    socket.setTimeout(0);\n    socket.setNoDelay(true);\n    try {\n      socket.write(headers.concat('', '').join('\\r\\n'));\n    }\n    catch (e) {\n      // if the upgrade write fails, shut the connection down hard\n      try { socket.destroy(); } catch (e) {}\n      return;\n    }\n\n    var client = new WebSocket([req, socket, upgradeHead], {\n      protocolVersion: version,\n      protocol: protocol\n    });\n\n    if (self.options.clientTracking) {\n      self.clients.push(client);\n      client.on('close', function() {\n        var index = self.clients.indexOf(client);\n        if (index != -1) {\n          self.clients.splice(index, 1);\n        }\n      });\n    }\n\n    // signal upgrade complete\n    socket.removeListener('error', errorHandler);\n    cb(client);\n  }\n\n  // optionally call external protocol selection handler before\n  // calling completeHybiUpgrade2\n  var completeHybiUpgrade1 = function() {\n    // choose from the sub-protocols\n    if (typeof self.options.handleProtocols == 'function') {\n        var protList = (protocols || \"\").split(/, */);\n        var callbackCalled = false;\n        var res = self.options.handleProtocols(protList, function(result, protocol) {\n          callbackCalled = true;\n          if (!result) abortConnection(socket, 404, 'Unauthorized')\n          else completeHybiUpgrade2(protocol);\n        });\n        if (!callbackCalled) {\n            // the handleProtocols handler never called our callback\n            abortConnection(socket, 501, 'Could not process protocols');\n        }\n        return;\n    } else {\n        if (typeof protocols !== 'undefined') {\n            completeHybiUpgrade2(protocols.split(/, */)[0]);\n        }\n        else {\n            completeHybiUpgrade2();\n        }\n    }\n  }\n\n  // optionally call external client verification handler\n  if (typeof this.options.verifyClient == 'function') {\n    var info = {\n      origin: origin,\n      secure: typeof req.connection.authorized !== 'undefined' || typeof req.connection.encrypted !== 'undefined',\n      req: req\n    };\n    if (this.options.verifyClient.length == 2) {\n      this.options.verifyClient(info, function(result, code, name) {\n        if (typeof code === 'undefined') code = 401;\n        if (typeof name === 'undefined') name = http.STATUS_CODES[code];\n\n        if (!result) abortConnection(socket, code, name);\n        else completeHybiUpgrade1();\n      });\n      return;\n    }\n    else if (!this.options.verifyClient(info)) {\n      abortConnection(socket, 401, 'Unauthorized');\n      return;\n    }\n  }\n\n  completeHybiUpgrade1();\n}\n\nfunction handleHixieUpgrade(req, socket, upgradeHead, cb) {\n  // handle premature socket errors\n  var errorHandler = function() {\n    try { socket.destroy(); } catch (e) {}\n  }\n  socket.on('error', errorHandler);\n\n  // bail if options prevent hixie\n  if (this.options.disableHixie) {\n    abortConnection(socket, 401, 'Hixie support disabled');\n    return;\n  }\n\n  // verify key presence\n  if (!req.headers['sec-websocket-key2']) {\n    abortConnection(socket, 400, 'Bad Request');\n    return;\n  }\n\n  var origin = req.headers['origin']\n    , self = this;\n\n  // setup handshake completion to run after client has been verified\n  var onClientVerified = function() {\n    var wshost;\n    if (!req.headers['x-forwarded-host'])\n        wshost = req.headers.host;\n    else\n        wshost = req.headers['x-forwarded-host'];\n    var location = ((req.headers['x-forwarded-proto'] === 'https' || socket.encrypted) ? 'wss' : 'ws') + '://' + wshost + req.url\n      , protocol = req.headers['sec-websocket-protocol'];\n\n    // handshake completion code to run once nonce has been successfully retrieved\n    var completeHandshake = function(nonce, rest) {\n      // calculate key\n      var k1 = req.headers['sec-websocket-key1']\n        , k2 = req.headers['sec-websocket-key2']\n        , md5 = crypto.createHash('md5');\n\n      [k1, k2].forEach(function (k) {\n        var n = parseInt(k.replace(/[^\\d]/g, ''))\n          , spaces = k.replace(/[^ ]/g, '').length;\n        if (spaces === 0 || n % spaces !== 0){\n          abortConnection(socket, 400, 'Bad Request');\n          return;\n        }\n        n /= spaces;\n        md5.update(String.fromCharCode(\n          n >> 24 & 0xFF,\n          n >> 16 & 0xFF,\n          n >> 8  & 0xFF,\n          n       & 0xFF));\n      });\n      md5.update(nonce.toString('binary'));\n\n      var headers = [\n          'HTTP/1.1 101 Switching Protocols'\n        , 'Upgrade: WebSocket'\n        , 'Connection: Upgrade'\n        , 'Sec-WebSocket-Location: ' + location\n      ];\n      if (typeof protocol != 'undefined') headers.push('Sec-WebSocket-Protocol: ' + protocol);\n      if (typeof origin != 'undefined') headers.push('Sec-WebSocket-Origin: ' + origin);\n\n      socket.setTimeout(0);\n      socket.setNoDelay(true);\n      try {\n        // merge header and hash buffer\n        var headerBuffer = new Buffer(headers.concat('', '').join('\\r\\n'));\n        var hashBuffer = new Buffer(md5.digest('binary'), 'binary');\n        var handshakeBuffer = new Buffer(headerBuffer.length + hashBuffer.length);\n        headerBuffer.copy(handshakeBuffer, 0);\n        hashBuffer.copy(handshakeBuffer, headerBuffer.length);\n\n        // do a single write, which - upon success - causes a new client websocket to be setup\n        socket.write(handshakeBuffer, 'binary', function(err) {\n          if (err) return; // do not create client if an error happens\n          var client = new WebSocket([req, socket, rest], {\n            protocolVersion: 'hixie-76',\n            protocol: protocol\n          });\n          if (self.options.clientTracking) {\n            self.clients.push(client);\n            client.on('close', function() {\n              var index = self.clients.indexOf(client);\n              if (index != -1) {\n                self.clients.splice(index, 1);\n              }\n            });\n          }\n\n          // signal upgrade complete\n          socket.removeListener('error', errorHandler);\n          cb(client);\n        });\n      }\n      catch (e) {\n        try { socket.destroy(); } catch (e) {}\n        return;\n      }\n    }\n\n    // retrieve nonce\n    var nonceLength = 8;\n    if (upgradeHead && upgradeHead.length >= nonceLength) {\n      var nonce = upgradeHead.slice(0, nonceLength);\n      var rest = upgradeHead.length > nonceLength ? upgradeHead.slice(nonceLength) : null;\n      completeHandshake.call(self, nonce, rest);\n    }\n    else {\n      // nonce not present in upgradeHead, so we must wait for enough data\n      // data to arrive before continuing\n      var nonce = new Buffer(nonceLength);\n      upgradeHead.copy(nonce, 0);\n      var received = upgradeHead.length;\n      var rest = null;\n      var handler = function (data) {\n        var toRead = Math.min(data.length, nonceLength - received);\n        if (toRead === 0) return;\n        data.copy(nonce, received, 0, toRead);\n        received += toRead;\n        if (received == nonceLength) {\n          socket.removeListener('data', handler);\n          if (toRead < data.length) rest = data.slice(toRead);\n          completeHandshake.call(self, nonce, rest);\n        }\n      }\n      socket.on('data', handler);\n    }\n  }\n\n  // verify client\n  if (typeof this.options.verifyClient == 'function') {\n    var info = {\n      origin: origin,\n      secure: typeof req.connection.authorized !== 'undefined' || typeof req.connection.encrypted !== 'undefined',\n      req: req\n    };\n    if (this.options.verifyClient.length == 2) {\n      var self = this;\n      this.options.verifyClient(info, function(result, code, name) {\n        if (typeof code === 'undefined') code = 401;\n        if (typeof name === 'undefined') name = http.STATUS_CODES[code];\n\n        if (!result) abortConnection(socket, code, name);\n        else onClientVerified.apply(self);\n      });\n      return;\n    }\n    else if (!this.options.verifyClient(info)) {\n      abortConnection(socket, 401, 'Unauthorized');\n      return;\n    }\n  }\n\n  // no client verification required\n  onClientVerified();\n}\n\nfunction abortConnection(socket, code, name) {\n  try {\n    var response = [\n      'HTTP/1.1 ' + code + ' ' + name,\n      'Content-type: text/html'\n    ];\n    socket.write(response.concat('', '').join('\\r\\n'));\n  }\n  catch (e) { /* ignore errors - we've aborted this connection */ }\n  finally {\n    // ensure that an early aborted connection is shut down completely\n    try { socket.destroy(); } catch (e) {}\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}