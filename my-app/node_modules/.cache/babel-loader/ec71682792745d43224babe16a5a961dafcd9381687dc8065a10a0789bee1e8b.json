{"ast":null,"code":"var _s = $RefreshSig$();\n// WebSocketManager.js\n\nimport { useEffect, useRef } from 'react';\nconst WebSocketManager = () => {\n  _s();\n  const ws = useRef(null);\n  useEffect(() => {\n    // Create the WebSocket connection\n    ws.current = new WebSocket('ws://localhost:4000');\n\n    // Add event listeners for message and close events\n    ws.current.onmessage = event => {\n      const receivedData = event.data;\n\n      // Process the received data\n      // You can update the application state or trigger actions based on the received data\n    };\n\n    ws.current.onclose = () => {\n      // Handle WebSocket close event\n      // You can update the application state or trigger actions based on the close event\n    };\n\n    // Clean up the WebSocket connection on component unmount\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, []);\n  const sendData = data => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(data);\n    }\n  };\n  return null;\n};\n_s(WebSocketManager, \"ACfmnhMR+o55bWuVwUxYindyVBE=\");\n_c = WebSocketManager;\nexport default WebSocketManager;\nvar _c;\n$RefreshReg$(_c, \"WebSocketManager\");","map":{"version":3,"names":["useEffect","useRef","WebSocketManager","_s","ws","current","WebSocket","onmessage","event","receivedData","data","onclose","close","sendData","readyState","OPEN","send","_c","$RefreshReg$"],"sources":["D:/Deneme/my-app/src/WebSocketManager.js"],"sourcesContent":["// WebSocketManager.js\r\n\r\nimport { useEffect, useRef } from 'react';\r\n\r\nconst WebSocketManager = () => {\r\n  const ws = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Create the WebSocket connection\r\n    ws.current = new WebSocket('ws://localhost:4000');\r\n\r\n    // Add event listeners for message and close events\r\n    ws.current.onmessage = event => {\r\n      const receivedData = event.data;\r\n\r\n      // Process the received data\r\n      // You can update the application state or trigger actions based on the received data\r\n    };\r\n\r\n    ws.current.onclose = () => {\r\n      // Handle WebSocket close event\r\n      // You can update the application state or trigger actions based on the close event\r\n    };\r\n\r\n    // Clean up the WebSocket connection on component unmount\r\n    return () => {\r\n      if (ws.current) {\r\n        ws.current.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const sendData = data => {\r\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\r\n      ws.current.send(data);\r\n    }\r\n  };\r\n\r\n  return null;\r\n};\r\n\r\nexport default WebSocketManager;\r\n"],"mappings":";AAAA;;AAEA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,EAAE,GAAGH,MAAM,CAAC,IAAI,CAAC;EAEvBD,SAAS,CAAC,MAAM;IACd;IACAI,EAAE,CAACC,OAAO,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;;IAEjD;IACAF,EAAE,CAACC,OAAO,CAACE,SAAS,GAAGC,KAAK,IAAI;MAC9B,MAAMC,YAAY,GAAGD,KAAK,CAACE,IAAI;;MAE/B;MACA;IACF,CAAC;;IAEDN,EAAE,CAACC,OAAO,CAACM,OAAO,GAAG,MAAM;MACzB;MACA;IAAA,CACD;;IAED;IACA,OAAO,MAAM;MACX,IAAIP,EAAE,CAACC,OAAO,EAAE;QACdD,EAAE,CAACC,OAAO,CAACO,KAAK,CAAC,CAAC;MACpB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,QAAQ,GAAGH,IAAI,IAAI;IACvB,IAAIN,EAAE,CAACC,OAAO,IAAID,EAAE,CAACC,OAAO,CAACS,UAAU,KAAKR,SAAS,CAACS,IAAI,EAAE;MAC1DX,EAAE,CAACC,OAAO,CAACW,IAAI,CAACN,IAAI,CAAC;IACvB;EACF,CAAC;EAED,OAAO,IAAI;AACb,CAAC;AAACP,EAAA,CAnCID,gBAAgB;AAAAe,EAAA,GAAhBf,gBAAgB;AAqCtB,eAAeA,gBAAgB;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}