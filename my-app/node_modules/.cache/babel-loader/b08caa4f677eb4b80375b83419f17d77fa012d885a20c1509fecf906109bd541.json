{"ast":null,"code":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('util'),\n  Validation = require('./Validation').Validation,\n  ErrorCodes = require('./ErrorCodes'),\n  BufferPool = require('./BufferPool'),\n  bufferUtil = require('./BufferUtil').BufferUtil;\n\n/**\n * HyBi Receiver implementation\n */\n\nfunction Receiver() {\n  // memory pool for fragmented messages\n  var fragmentedPoolPrevUsed = -1;\n  this.fragmentedBufferPool = new BufferPool(1024, function (db, length) {\n    return db.used + length;\n  }, function (db) {\n    return fragmentedPoolPrevUsed = fragmentedPoolPrevUsed >= 0 ? (fragmentedPoolPrevUsed + db.used) / 2 : db.used;\n  });\n\n  // memory pool for unfragmented messages\n  var unfragmentedPoolPrevUsed = -1;\n  this.unfragmentedBufferPool = new BufferPool(1024, function (db, length) {\n    return db.used + length;\n  }, function (db) {\n    return unfragmentedPoolPrevUsed = unfragmentedPoolPrevUsed >= 0 ? (unfragmentedPoolPrevUsed + db.used) / 2 : db.used;\n  });\n  this.state = {\n    activeFragmentedOperation: null,\n    lastFragment: false,\n    masked: false,\n    opcode: 0,\n    fragmentedOperation: false\n  };\n  this.overflow = [];\n  this.headerBuffer = new Buffer(10);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.currentMessage = [];\n  this.expectHeader(2, this.processPacket);\n  this.dead = false;\n  this.onerror = function () {};\n  this.ontext = function () {};\n  this.onbinary = function () {};\n  this.onclose = function () {};\n  this.onping = function () {};\n  this.onpong = function () {};\n}\nmodule.exports = Receiver;\n\n/**\n * Add new data to the parser.\n *\n * @api public\n */\n\nReceiver.prototype.add = function (data) {\n  var dataLength = data.length;\n  if (dataLength == 0) return;\n  if (this.expectBuffer == null) {\n    this.overflow.push(data);\n    return;\n  }\n  var toRead = Math.min(dataLength, this.expectBuffer.length - this.expectOffset);\n  fastCopy(toRead, data, this.expectBuffer, this.expectOffset);\n  this.expectOffset += toRead;\n  if (toRead < dataLength) {\n    this.overflow.push(data.slice(toRead));\n  }\n  while (this.expectBuffer && this.expectOffset == this.expectBuffer.length) {\n    var bufferForHandler = this.expectBuffer;\n    this.expectBuffer = null;\n    this.expectOffset = 0;\n    this.expectHandler.call(this, bufferForHandler);\n  }\n};\n\n/**\n * Releases all resources used by the receiver.\n *\n * @api public\n */\n\nReceiver.prototype.cleanup = function () {\n  this.dead = true;\n  this.overflow = null;\n  this.headerBuffer = null;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.unfragmentedBufferPool = null;\n  this.fragmentedBufferPool = null;\n  this.state = null;\n  this.currentMessage = null;\n  this.onerror = null;\n  this.ontext = null;\n  this.onbinary = null;\n  this.onclose = null;\n  this.onping = null;\n  this.onpong = null;\n};\n\n/**\n * Waits for a certain amount of header bytes to be available, then fires a callback.\n *\n * @api private\n */\n\nReceiver.prototype.expectHeader = function (length, handler) {\n  if (length == 0) {\n    handler(null);\n    return;\n  }\n  this.expectBuffer = this.headerBuffer.slice(this.expectOffset, this.expectOffset + length);\n  this.expectHandler = handler;\n  var toRead = length;\n  while (toRead > 0 && this.overflow.length > 0) {\n    var fromOverflow = this.overflow.pop();\n    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));\n    var read = Math.min(fromOverflow.length, toRead);\n    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);\n    this.expectOffset += read;\n    toRead -= read;\n  }\n};\n\n/**\n * Waits for a certain amount of data bytes to be available, then fires a callback.\n *\n * @api private\n */\n\nReceiver.prototype.expectData = function (length, handler) {\n  if (length == 0) {\n    handler(null);\n    return;\n  }\n  this.expectBuffer = this.allocateFromPool(length, this.state.fragmentedOperation);\n  this.expectHandler = handler;\n  var toRead = length;\n  while (toRead > 0 && this.overflow.length > 0) {\n    var fromOverflow = this.overflow.pop();\n    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));\n    var read = Math.min(fromOverflow.length, toRead);\n    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);\n    this.expectOffset += read;\n    toRead -= read;\n  }\n};\n\n/**\n * Allocates memory from the buffer pool.\n *\n * @api private\n */\n\nReceiver.prototype.allocateFromPool = function (length, isFragmented) {\n  return (isFragmented ? this.fragmentedBufferPool : this.unfragmentedBufferPool).get(length);\n};\n\n/**\n * Start processing a new packet.\n *\n * @api private\n */\n\nReceiver.prototype.processPacket = function (data) {\n  if ((data[0] & 0x70) != 0) {\n    this.error('reserved fields must be empty', 1002);\n    return;\n  }\n  this.state.lastFragment = (data[0] & 0x80) == 0x80;\n  this.state.masked = (data[1] & 0x80) == 0x80;\n  var opcode = data[0] & 0xf;\n  if (opcode === 0) {\n    // continuation frame\n    this.state.fragmentedOperation = true;\n    this.state.opcode = this.state.activeFragmentedOperation;\n    if (!(this.state.opcode == 1 || this.state.opcode == 2)) {\n      this.error('continuation frame cannot follow current opcode', 1002);\n      return;\n    }\n  } else {\n    if (opcode < 3 && this.state.activeFragmentedOperation != null) {\n      this.error('data frames after the initial data frame must have opcode 0', 1002);\n      return;\n    }\n    this.state.opcode = opcode;\n    if (this.state.lastFragment === false) {\n      this.state.fragmentedOperation = true;\n      this.state.activeFragmentedOperation = opcode;\n    } else this.state.fragmentedOperation = false;\n  }\n  var handler = opcodes[this.state.opcode];\n  if (typeof handler == 'undefined') this.error('no handler for opcode ' + this.state.opcode, 1002);else {\n    handler.start.call(this, data);\n  }\n};\n\n/**\n * Endprocessing a packet.\n *\n * @api private\n */\n\nReceiver.prototype.endPacket = function () {\n  if (!this.state.fragmentedOperation) this.unfragmentedBufferPool.reset(true);else if (this.state.lastFragment) this.fragmentedBufferPool.reset(false);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  if (this.state.lastFragment && this.state.opcode === this.state.activeFragmentedOperation) {\n    // end current fragmented operation\n    this.state.activeFragmentedOperation = null;\n  }\n  this.state.lastFragment = false;\n  this.state.opcode = this.state.activeFragmentedOperation != null ? this.state.activeFragmentedOperation : 0;\n  this.state.masked = false;\n  this.expectHeader(2, this.processPacket);\n};\n\n/**\n * Reset the parser state.\n *\n * @api private\n */\n\nReceiver.prototype.reset = function () {\n  if (this.dead) return;\n  this.state = {\n    activeFragmentedOperation: null,\n    lastFragment: false,\n    masked: false,\n    opcode: 0,\n    fragmentedOperation: false\n  };\n  this.fragmentedBufferPool.reset(true);\n  this.unfragmentedBufferPool.reset(true);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.overflow = [];\n  this.currentMessage = [];\n};\n\n/**\n * Unmask received data.\n *\n * @api private\n */\n\nReceiver.prototype.unmask = function (mask, buf, binary) {\n  if (mask != null && buf != null) bufferUtil.unmask(buf, mask);\n  if (binary) return buf;\n  return buf != null ? buf.toString('utf8') : '';\n};\n\n/**\n * Concatenates a list of buffers.\n *\n * @api private\n */\n\nReceiver.prototype.concatBuffers = function (buffers) {\n  var length = 0;\n  for (var i = 0, l = buffers.length; i < l; ++i) length += buffers[i].length;\n  var mergedBuffer = new Buffer(length);\n  bufferUtil.merge(mergedBuffer, buffers);\n  return mergedBuffer;\n};\n\n/**\n * Handles an error\n *\n * @api private\n */\n\nReceiver.prototype.error = function (reason, protocolErrorCode) {\n  this.reset();\n  this.onerror(reason, protocolErrorCode);\n  return this;\n};\n\n/**\n * Buffer utilities\n */\n\nfunction readUInt16BE(start) {\n  return (this[start] << 8) + this[start + 1];\n}\nfunction readUInt32BE(start) {\n  return (this[start] << 24) + (this[start + 1] << 16) + (this[start + 2] << 8) + this[start + 3];\n}\nfunction fastCopy(length, srcBuffer, dstBuffer, dstOffset) {\n  switch (length) {\n    default:\n      srcBuffer.copy(dstBuffer, dstOffset, 0, length);\n      break;\n    case 16:\n      dstBuffer[dstOffset + 15] = srcBuffer[15];\n    case 15:\n      dstBuffer[dstOffset + 14] = srcBuffer[14];\n    case 14:\n      dstBuffer[dstOffset + 13] = srcBuffer[13];\n    case 13:\n      dstBuffer[dstOffset + 12] = srcBuffer[12];\n    case 12:\n      dstBuffer[dstOffset + 11] = srcBuffer[11];\n    case 11:\n      dstBuffer[dstOffset + 10] = srcBuffer[10];\n    case 10:\n      dstBuffer[dstOffset + 9] = srcBuffer[9];\n    case 9:\n      dstBuffer[dstOffset + 8] = srcBuffer[8];\n    case 8:\n      dstBuffer[dstOffset + 7] = srcBuffer[7];\n    case 7:\n      dstBuffer[dstOffset + 6] = srcBuffer[6];\n    case 6:\n      dstBuffer[dstOffset + 5] = srcBuffer[5];\n    case 5:\n      dstBuffer[dstOffset + 4] = srcBuffer[4];\n    case 4:\n      dstBuffer[dstOffset + 3] = srcBuffer[3];\n    case 3:\n      dstBuffer[dstOffset + 2] = srcBuffer[2];\n    case 2:\n      dstBuffer[dstOffset + 1] = srcBuffer[1];\n    case 1:\n      dstBuffer[dstOffset] = srcBuffer[0];\n  }\n}\n\n/**\n * Opcode handlers\n */\n\nvar opcodes = {\n  // text\n  '1': {\n    start: function (data) {\n      var self = this;\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['1'].getData.call(self, firstLength);\n      } else if (firstLength == 126) {\n        self.expectHeader(2, function (data) {\n          opcodes['1'].getData.call(self, readUInt16BE.call(data, 0));\n        });\n      } else if (firstLength == 127) {\n        self.expectHeader(8, function (data) {\n          if (readUInt32BE.call(data, 0) != 0) {\n            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);\n            return;\n          }\n          opcodes['1'].getData.call(self, readUInt32BE.call(data, 4));\n        });\n      }\n    },\n    getData: function (length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['1'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        self.expectData(length, function (data) {\n          opcodes['1'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function (mask, data) {\n      var packet = this.unmask(mask, data, true);\n      if (packet != null) this.currentMessage.push(packet);\n      if (this.state.lastFragment) {\n        var messageBuffer = this.concatBuffers(this.currentMessage);\n        if (!Validation.isValidUTF8(messageBuffer)) {\n          this.error('invalid utf8 sequence', 1007);\n          return;\n        }\n        this.ontext(messageBuffer.toString('utf8'), {\n          masked: this.state.masked,\n          buffer: messageBuffer\n        });\n        this.currentMessage = [];\n      }\n      this.endPacket();\n    }\n  },\n  // binary\n  '2': {\n    start: function (data) {\n      var self = this;\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['2'].getData.call(self, firstLength);\n      } else if (firstLength == 126) {\n        self.expectHeader(2, function (data) {\n          opcodes['2'].getData.call(self, readUInt16BE.call(data, 0));\n        });\n      } else if (firstLength == 127) {\n        self.expectHeader(8, function (data) {\n          if (readUInt32BE.call(data, 0) != 0) {\n            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);\n            return;\n          }\n          opcodes['2'].getData.call(self, readUInt32BE.call(data, 4, true));\n        });\n      }\n    },\n    getData: function (length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['2'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        self.expectData(length, function (data) {\n          opcodes['2'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function (mask, data) {\n      var packet = this.unmask(mask, data, true);\n      if (packet != null) this.currentMessage.push(packet);\n      if (this.state.lastFragment) {\n        var messageBuffer = this.concatBuffers(this.currentMessage);\n        this.onbinary(messageBuffer, {\n          masked: this.state.masked,\n          buffer: messageBuffer\n        });\n        this.currentMessage = [];\n      }\n      this.endPacket();\n    }\n  },\n  // close\n  '8': {\n    start: function (data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented close is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['8'].getData.call(self, firstLength);\n      } else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function (length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['8'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        self.expectData(length, function (data) {\n          opcodes['8'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function (mask, data) {\n      var self = this;\n      data = self.unmask(mask, data, true);\n      if (data && data.length == 1) {\n        self.error('close packets with data must be at least two bytes long', 1002);\n        return;\n      }\n      var code = data && data.length > 1 ? readUInt16BE.call(data, 0) : 1000;\n      if (!ErrorCodes.isValidErrorCode(code)) {\n        self.error('invalid error code', 1002);\n        return;\n      }\n      var message = '';\n      if (data && data.length > 2) {\n        var messageBuffer = data.slice(2);\n        if (!Validation.isValidUTF8(messageBuffer)) {\n          self.error('invalid utf8 sequence', 1007);\n          return;\n        }\n        message = messageBuffer.toString('utf8');\n      }\n      this.onclose(code, message, {\n        masked: self.state.masked\n      });\n      this.reset();\n    }\n  },\n  // ping\n  '9': {\n    start: function (data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented ping is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['9'].getData.call(self, firstLength);\n      } else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function (length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['9'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        self.expectData(length, function (data) {\n          opcodes['9'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function (mask, data) {\n      this.onping(this.unmask(mask, data, true), {\n        masked: this.state.masked,\n        binary: true\n      });\n      this.endPacket();\n    }\n  },\n  // pong\n  '10': {\n    start: function (data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented pong is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['10'].getData.call(self, firstLength);\n      } else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function (length) {\n      var self = this;\n      if (this.state.masked) {\n        this.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['10'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        this.expectData(length, function (data) {\n          opcodes['10'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function (mask, data) {\n      this.onpong(this.unmask(mask, data, true), {\n        masked: this.state.masked,\n        binary: true\n      });\n      this.endPacket();\n    }\n  }\n};","map":{"version":3,"names":["util","require","Validation","ErrorCodes","BufferPool","bufferUtil","BufferUtil","Receiver","fragmentedPoolPrevUsed","fragmentedBufferPool","db","length","used","unfragmentedPoolPrevUsed","unfragmentedBufferPool","state","activeFragmentedOperation","lastFragment","masked","opcode","fragmentedOperation","overflow","headerBuffer","Buffer","expectOffset","expectBuffer","expectHandler","currentMessage","expectHeader","processPacket","dead","onerror","ontext","onbinary","onclose","onping","onpong","module","exports","prototype","add","data","dataLength","push","toRead","Math","min","fastCopy","slice","bufferForHandler","call","cleanup","handler","fromOverflow","pop","read","expectData","allocateFromPool","isFragmented","get","error","opcodes","start","endPacket","reset","unmask","mask","buf","binary","toString","concatBuffers","buffers","i","l","mergedBuffer","merge","reason","protocolErrorCode","readUInt16BE","readUInt32BE","srcBuffer","dstBuffer","dstOffset","copy","self","firstLength","getData","finish","packet","messageBuffer","isValidUTF8","buffer","code","isValidErrorCode","message"],"sources":["D:/Deneme/my-app/node_modules/express-ws/node_modules/ws/lib/Receiver.js"],"sourcesContent":["/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('util')\n  , Validation = require('./Validation').Validation\n  , ErrorCodes = require('./ErrorCodes')\n  , BufferPool = require('./BufferPool')\n  , bufferUtil = require('./BufferUtil').BufferUtil;\n\n/**\n * HyBi Receiver implementation\n */\n\nfunction Receiver () {\n  // memory pool for fragmented messages\n  var fragmentedPoolPrevUsed = -1;\n  this.fragmentedBufferPool = new BufferPool(1024, function(db, length) {\n    return db.used + length;\n  }, function(db) {\n    return fragmentedPoolPrevUsed = fragmentedPoolPrevUsed >= 0 ?\n      (fragmentedPoolPrevUsed + db.used) / 2 :\n      db.used;\n  });\n\n  // memory pool for unfragmented messages\n  var unfragmentedPoolPrevUsed = -1;\n  this.unfragmentedBufferPool = new BufferPool(1024, function(db, length) {\n    return db.used + length;\n  }, function(db) {\n    return unfragmentedPoolPrevUsed = unfragmentedPoolPrevUsed >= 0 ?\n      (unfragmentedPoolPrevUsed + db.used) / 2 :\n      db.used;\n  });\n\n  this.state = {\n    activeFragmentedOperation: null,\n    lastFragment: false,\n    masked: false,\n    opcode: 0,\n    fragmentedOperation: false\n  };\n  this.overflow = [];\n  this.headerBuffer = new Buffer(10);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.currentMessage = [];\n  this.expectHeader(2, this.processPacket);\n  this.dead = false;\n\n  this.onerror = function() {};\n  this.ontext = function() {};\n  this.onbinary = function() {};\n  this.onclose = function() {};\n  this.onping = function() {};\n  this.onpong = function() {};\n}\n\nmodule.exports = Receiver;\n\n/**\n * Add new data to the parser.\n *\n * @api public\n */\n\nReceiver.prototype.add = function(data) {\n  var dataLength = data.length;\n  if (dataLength == 0) return;\n  if (this.expectBuffer == null) {\n    this.overflow.push(data);\n    return;\n  }\n  var toRead = Math.min(dataLength, this.expectBuffer.length - this.expectOffset);\n  fastCopy(toRead, data, this.expectBuffer, this.expectOffset);\n  this.expectOffset += toRead;\n  if (toRead < dataLength) {\n    this.overflow.push(data.slice(toRead));\n  }\n  while (this.expectBuffer && this.expectOffset == this.expectBuffer.length) {\n    var bufferForHandler = this.expectBuffer;\n    this.expectBuffer = null;\n    this.expectOffset = 0;\n    this.expectHandler.call(this, bufferForHandler);\n  }\n};\n\n/**\n * Releases all resources used by the receiver.\n *\n * @api public\n */\n\nReceiver.prototype.cleanup = function() {\n  this.dead = true;\n  this.overflow = null;\n  this.headerBuffer = null;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.unfragmentedBufferPool = null;\n  this.fragmentedBufferPool = null;\n  this.state = null;\n  this.currentMessage = null;\n  this.onerror = null;\n  this.ontext = null;\n  this.onbinary = null;\n  this.onclose = null;\n  this.onping = null;\n  this.onpong = null;\n};\n\n/**\n * Waits for a certain amount of header bytes to be available, then fires a callback.\n *\n * @api private\n */\n\nReceiver.prototype.expectHeader = function(length, handler) {\n  if (length == 0) {\n    handler(null);\n    return;\n  }\n  this.expectBuffer = this.headerBuffer.slice(this.expectOffset, this.expectOffset + length);\n  this.expectHandler = handler;\n  var toRead = length;\n  while (toRead > 0 && this.overflow.length > 0) {\n    var fromOverflow = this.overflow.pop();\n    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));\n    var read = Math.min(fromOverflow.length, toRead);\n    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);\n    this.expectOffset += read;\n    toRead -= read;\n  }\n};\n\n/**\n * Waits for a certain amount of data bytes to be available, then fires a callback.\n *\n * @api private\n */\n\nReceiver.prototype.expectData = function(length, handler) {\n  if (length == 0) {\n    handler(null);\n    return;\n  }\n  this.expectBuffer = this.allocateFromPool(length, this.state.fragmentedOperation);\n  this.expectHandler = handler;\n  var toRead = length;\n  while (toRead > 0 && this.overflow.length > 0) {\n    var fromOverflow = this.overflow.pop();\n    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));\n    var read = Math.min(fromOverflow.length, toRead);\n    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);\n    this.expectOffset += read;\n    toRead -= read;\n  }\n};\n\n/**\n * Allocates memory from the buffer pool.\n *\n * @api private\n */\n\nReceiver.prototype.allocateFromPool = function(length, isFragmented) {\n  return (isFragmented ? this.fragmentedBufferPool : this.unfragmentedBufferPool).get(length);\n};\n\n/**\n * Start processing a new packet.\n *\n * @api private\n */\n\nReceiver.prototype.processPacket = function (data) {\n  if ((data[0] & 0x70) != 0) {\n    this.error('reserved fields must be empty', 1002);\n    return;\n  }\n  this.state.lastFragment = (data[0] & 0x80) == 0x80;\n  this.state.masked = (data[1] & 0x80) == 0x80;\n  var opcode = data[0] & 0xf;\n  if (opcode === 0) {\n    // continuation frame\n    this.state.fragmentedOperation = true;\n    this.state.opcode = this.state.activeFragmentedOperation;\n    if (!(this.state.opcode == 1 || this.state.opcode == 2)) {\n      this.error('continuation frame cannot follow current opcode', 1002);\n      return;\n    }\n  }\n  else {\n    if (opcode < 3 && this.state.activeFragmentedOperation != null) {\n      this.error('data frames after the initial data frame must have opcode 0', 1002);\n      return;\n    }\n    this.state.opcode = opcode;\n    if (this.state.lastFragment === false) {\n      this.state.fragmentedOperation = true;\n      this.state.activeFragmentedOperation = opcode;\n    }\n    else this.state.fragmentedOperation = false;\n  }\n  var handler = opcodes[this.state.opcode];\n  if (typeof handler == 'undefined') this.error('no handler for opcode ' + this.state.opcode, 1002);\n  else {\n    handler.start.call(this, data);\n  }\n};\n\n/**\n * Endprocessing a packet.\n *\n * @api private\n */\n\nReceiver.prototype.endPacket = function() {\n  if (!this.state.fragmentedOperation) this.unfragmentedBufferPool.reset(true);\n  else if (this.state.lastFragment) this.fragmentedBufferPool.reset(false);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  if (this.state.lastFragment && this.state.opcode === this.state.activeFragmentedOperation) {\n    // end current fragmented operation\n    this.state.activeFragmentedOperation = null;\n  }\n  this.state.lastFragment = false;\n  this.state.opcode = this.state.activeFragmentedOperation != null ? this.state.activeFragmentedOperation : 0;\n  this.state.masked = false;\n  this.expectHeader(2, this.processPacket);\n};\n\n/**\n * Reset the parser state.\n *\n * @api private\n */\n\nReceiver.prototype.reset = function() {\n  if (this.dead) return;\n  this.state = {\n    activeFragmentedOperation: null,\n    lastFragment: false,\n    masked: false,\n    opcode: 0,\n    fragmentedOperation: false\n  };\n  this.fragmentedBufferPool.reset(true);\n  this.unfragmentedBufferPool.reset(true);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.overflow = [];\n  this.currentMessage = [];\n};\n\n/**\n * Unmask received data.\n *\n * @api private\n */\n\nReceiver.prototype.unmask = function (mask, buf, binary) {\n  if (mask != null && buf != null) bufferUtil.unmask(buf, mask);\n  if (binary) return buf;\n  return buf != null ? buf.toString('utf8') : '';\n};\n\n/**\n * Concatenates a list of buffers.\n *\n * @api private\n */\n\nReceiver.prototype.concatBuffers = function(buffers) {\n  var length = 0;\n  for (var i = 0, l = buffers.length; i < l; ++i) length += buffers[i].length;\n  var mergedBuffer = new Buffer(length);\n  bufferUtil.merge(mergedBuffer, buffers);\n  return mergedBuffer;\n};\n\n/**\n * Handles an error\n *\n * @api private\n */\n\nReceiver.prototype.error = function (reason, protocolErrorCode) {\n  this.reset();\n  this.onerror(reason, protocolErrorCode);\n  return this;\n};\n\n/**\n * Buffer utilities\n */\n\nfunction readUInt16BE(start) {\n  return (this[start]<<8) +\n         this[start+1];\n}\n\nfunction readUInt32BE(start) {\n  return (this[start]<<24) +\n         (this[start+1]<<16) +\n         (this[start+2]<<8) +\n         this[start+3];\n}\n\nfunction fastCopy(length, srcBuffer, dstBuffer, dstOffset) {\n  switch (length) {\n    default: srcBuffer.copy(dstBuffer, dstOffset, 0, length); break;\n    case 16: dstBuffer[dstOffset+15] = srcBuffer[15];\n    case 15: dstBuffer[dstOffset+14] = srcBuffer[14];\n    case 14: dstBuffer[dstOffset+13] = srcBuffer[13];\n    case 13: dstBuffer[dstOffset+12] = srcBuffer[12];\n    case 12: dstBuffer[dstOffset+11] = srcBuffer[11];\n    case 11: dstBuffer[dstOffset+10] = srcBuffer[10];\n    case 10: dstBuffer[dstOffset+9] = srcBuffer[9];\n    case 9: dstBuffer[dstOffset+8] = srcBuffer[8];\n    case 8: dstBuffer[dstOffset+7] = srcBuffer[7];\n    case 7: dstBuffer[dstOffset+6] = srcBuffer[6];\n    case 6: dstBuffer[dstOffset+5] = srcBuffer[5];\n    case 5: dstBuffer[dstOffset+4] = srcBuffer[4];\n    case 4: dstBuffer[dstOffset+3] = srcBuffer[3];\n    case 3: dstBuffer[dstOffset+2] = srcBuffer[2];\n    case 2: dstBuffer[dstOffset+1] = srcBuffer[1];\n    case 1: dstBuffer[dstOffset] = srcBuffer[0];\n  }\n}\n\n/**\n * Opcode handlers\n */\n\nvar opcodes = {\n  // text\n  '1': {\n    start: function(data) {\n      var self = this;\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['1'].getData.call(self, firstLength);\n      }\n      else if (firstLength == 126) {\n        self.expectHeader(2, function(data) {\n          opcodes['1'].getData.call(self, readUInt16BE.call(data, 0));\n        });\n      }\n      else if (firstLength == 127) {\n        self.expectHeader(8, function(data) {\n          if (readUInt32BE.call(data, 0) != 0) {\n            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);\n            return;\n          }\n          opcodes['1'].getData.call(self, readUInt32BE.call(data, 4));\n        });\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['1'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        self.expectData(length, function(data) {\n          opcodes['1'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      var packet = this.unmask(mask, data, true);\n      if (packet != null) this.currentMessage.push(packet);\n      if (this.state.lastFragment) {\n        var messageBuffer = this.concatBuffers(this.currentMessage);\n        if (!Validation.isValidUTF8(messageBuffer)) {\n          this.error('invalid utf8 sequence', 1007);\n          return;\n        }\n        this.ontext(messageBuffer.toString('utf8'), {masked: this.state.masked, buffer: messageBuffer});\n        this.currentMessage = [];\n      }\n      this.endPacket();\n    }\n  },\n  // binary\n  '2': {\n    start: function(data) {\n      var self = this;\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['2'].getData.call(self, firstLength);\n      }\n      else if (firstLength == 126) {\n        self.expectHeader(2, function(data) {\n          opcodes['2'].getData.call(self, readUInt16BE.call(data, 0));\n        });\n      }\n      else if (firstLength == 127) {\n        self.expectHeader(8, function(data) {\n          if (readUInt32BE.call(data, 0) != 0) {\n            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);\n            return;\n          }\n          opcodes['2'].getData.call(self, readUInt32BE.call(data, 4, true));\n        });\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['2'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        self.expectData(length, function(data) {\n          opcodes['2'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      var packet = this.unmask(mask, data, true);\n      if (packet != null) this.currentMessage.push(packet);\n      if (this.state.lastFragment) {\n        var messageBuffer = this.concatBuffers(this.currentMessage);\n        this.onbinary(messageBuffer, {masked: this.state.masked, buffer: messageBuffer});\n        this.currentMessage = [];\n      }\n      this.endPacket();\n    }\n  },\n  // close\n  '8': {\n    start: function(data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented close is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['8'].getData.call(self, firstLength);\n      }\n      else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['8'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        self.expectData(length, function(data) {\n          opcodes['8'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      var self = this;\n      data = self.unmask(mask, data, true);\n      if (data && data.length == 1) {\n        self.error('close packets with data must be at least two bytes long', 1002);\n        return;\n      }\n      var code = data && data.length > 1 ? readUInt16BE.call(data, 0) : 1000;\n      if (!ErrorCodes.isValidErrorCode(code)) {\n        self.error('invalid error code', 1002);\n        return;\n      }\n      var message = '';\n      if (data && data.length > 2) {\n        var messageBuffer = data.slice(2);\n        if (!Validation.isValidUTF8(messageBuffer)) {\n          self.error('invalid utf8 sequence', 1007);\n          return;\n        }\n        message = messageBuffer.toString('utf8');\n      }\n      this.onclose(code, message, {masked: self.state.masked});\n      this.reset();\n    },\n  },\n  // ping\n  '9': {\n    start: function(data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented ping is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['9'].getData.call(self, firstLength);\n      }\n      else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['9'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        self.expectData(length, function(data) {\n          opcodes['9'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      this.onping(this.unmask(mask, data, true), {masked: this.state.masked, binary: true});\n      this.endPacket();\n    }\n  },\n  // pong\n  '10': {\n    start: function(data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented pong is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['10'].getData.call(self, firstLength);\n      }\n      else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (this.state.masked) {\n        this.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['10'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        this.expectData(length, function(data) {\n          opcodes['10'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      this.onpong(this.unmask(mask, data, true), {masked: this.state.masked, binary: true});\n      this.endPacket();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}